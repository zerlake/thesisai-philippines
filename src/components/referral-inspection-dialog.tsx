"use client";

import { useEffect, useState } from "react";
import { useAuth } from "./auth-provider";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "./ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "./ui/table";
import { Skeleton } from "./ui/skeleton";
import { toast } from "sonner";
import { format } from "date-fns";

type ReferralDetail = {
  referred_user_name: string;
  signup_date: string;
  total_commission_earned: number | null;
};

interface ReferralInspectionDialogProps {
  userId: string;
  userName: string;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function ReferralInspectionDialog({ userId, userName, open, onOpenChange }: ReferralInspectionDialogProps) {
  const { supabase } = useAuth();
  const [details, setDetails] = useState<ReferralDetail[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (open && userId) {
      const fetchDetails = async () => {
        setIsLoading(true);
        const { data, error } = await supabase.rpc('get_referrer_details', { p_referrer_id: userId });
        if (error) {
          toast.error("Failed to fetch referral details.");
          console.error(error);
        } else {
          setDetails(data || []);
        }
        setIsLoading(false);
      };
      fetchDetails();
    }
  }, [open, userId, supabase]);

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Referral History for {userName}</DialogTitle>
          <DialogDescription>
            Review the sign-ups and earnings generated by this user&apos;s referral code.
          </DialogDescription>
        </DialogHeader>
        <div className="max-h-[60vh] overflow-y-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Referred User</TableHead>
                <TableHead>Signup Date</TableHead>
                <TableHead className="text-right">Commission Earned</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                Array.from({ length: 3 }).map((_, i) => (
                  <TableRow key={i}>
                    <TableCell><Skeleton className="h-5 w-32" /></TableCell>
                    <TableCell><Skeleton className="h-5 w-24" /></TableCell>
                    <TableCell className="text-right"><Skeleton className="h-5 w-16 ml-auto" /></TableCell>
                  </TableRow>
                ))
              ) : details.length > 0 ? (
                details.map((detail, i) => (
                  <TableRow key={i}>
                    <TableCell>{detail.referred_user_name}</TableCell>
                    <TableCell>{format(new Date(detail.signup_date), 'MMM d, yyyy, p')}</TableCell>
                    <TableCell className="text-right font-medium">
                      {detail.total_commission_earned ? `â‚±${Number(detail.total_commission_earned).toFixed(2)}` : <span className="text-muted-foreground">-</span>}
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={3} className="text-center h-24">
                    This user has not referred anyone yet.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </DialogContent>
    </Dialog>
  );
}